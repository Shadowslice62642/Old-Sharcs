#include "puzzle.h"
#include <array>
#include <string>

int binomial[31][31] = { {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,4,6,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,5,10,10,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,6,15,20,15,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,7,21,35,35,21,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,8,28,56,70,56,28,8,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,9,36,84,126,126,84,36,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,10,45,120,210,252,210,120,45,10,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,11,55,165,330,462,462,330,165,55,11,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,12,66,220,495,792,924,792,495,220,66,12,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,13,78,286,715,1287,1716,1716,1287,715,286,78,13,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,14,91,364,1001,2002,3003,3432,3003,2002,1001,364,91,14,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,15,105,455,1365,3003,5005,6435,6435,5005,3003,1365,455,105,15,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,16,120,560,1820,4368,8008,11440,12870,11440,8008,4368,1820,560,120,16,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,17,136,680,2380,6188,12376,19448,24310,24310,19448,12376,6188,2380,680,136,17,1,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,18,153,816,3060,8568,18564,31824,43758,48620,43758,31824,18564,8568,3060,816,153,18,1,0,0,0,0,0,0,0,0,0,0,0,0},{1,19,171,969,3876,11628,27132,50388,75582,92378,92378,75582,50388,27132,11628,3876,969,171,19,1,0,0,0,0,0,0,0,0,0,0,0},{1,20,190,1140,4845,15504,38760,77520,125970,167960,184756,167960,125970,77520,38760,15504,4845,1140,190,20,1,0,0,0,0,0,0,0,0,0,0},{1,21,210,1330,5985,20349,54264,116280,203490,293930,352716,352716,293930,203490,116280,54264,20349,5985,1330,210,21,1,0,0,0,0,0,0,0,0,0},{1,22,231,1540,7315,26334,74613,170544,319770,497420,646646,705432,646646,497420,319770,170544,74613,26334,7315,1540,231,22,1,0,0,0,0,0,0,0,0},{1,23,253,1771,8855,33649,100947,245157,490314,817190,1144066,1352078,1352078,1144066,817190,490314,245157,100947,33649,8855,1771,253,23,1,0,0,0,0,0,0,0},{1,24,276,2024,10626,42504,134596,346104,735471,1307504,1961256,2496144,2704156,2496144,1961256,1307504,735471,346104,134596,42504,10626,2024,276,24,1,0,0,0,0,0,0},{1,25,300,2300,12650,53130,177100,480700,1081575,2042975,3268760,4457400,5200300,5200300,4457400,3268760,2042975,1081575,480700,177100,53130,12650,2300,300,25,1,0,0,0,0,0},{1,26,325,2600,14950,65780,230230,657800,1562275,3124550,5311735,7726160,9657700,10400600,9657700,7726160,5311735,3124550,1562275,657800,230230,65780,14950,2600,325,26,1,0,0,0,0},{1,27,351,2925,17550,80730,296010,888030,2220075,4686825,8436285,13037895,17383860,20058300,20058300,17383860,13037895,8436285,4686825,2220075,888030,296010,80730,17550,2925,351,27,1,0,0,0},{1,28,378,3276,20475,98280,376740,1184040,3108105,6906900,13123110,21474180,30421755,37442160,40116600,37442160,30421755,21474180,13123110,6906900,3108105,1184040,376740,98280,20475,3276,378,28,1,0,0},{1,29,406,3654,23751,118755,475020,1560780,4292145,10015005,20030010,34597290,51895935,67863915,77558760,77558760,67863915,51895935,34597290,20030010,10015005,4292145,1560780,475020,118755,23751,3654,406,29,1,0},{1,30,435,4060,27405,142506,593775,2035800,5852925,14307150,30045015,54627300,86493225,119759850,145422675,155117520,145422675,119759850,86493225,54627300,30045015,14307150,5852925,2035800,593775,142506,27405,4060,435,30,1} };

uint32_t Puzzle::encode_edges_p(std::array<char,12> edges_p) {
    uint32_t x = 0;
    uint32_t t;
    int r, j;
    j = 0;
    t = 0;
    r = 6;
    for (int i = 11; i >= 0; i--) {
        if (edges_p[i] == 7) {
            t += binomial[i + j - 6][r];
            r--;
        }
        if (edges_p[i] < 7) j++;
    }
    x = x * 1 + t;
    j = 0;
    t = 0;
    r = 1;
    for (int i = 11; i >= 0; i--) {
        if (edges_p[i] == 6) {
            t += binomial[i + j - 5][r];
            r--;
        }
        if (edges_p[i] < 6) j++;
    }
    x = x * 7 + t;
    j = 0;
    t = 0;
    r = 1;
    for (int i = 11; i >= 0; i--) {
        if (edges_p[i] == 5) {
            t += binomial[i + j - 4][r];
            r--;
        }
        if (edges_p[i] < 5) j++;
    }
    x = x * 8 + t;
    j = 0;
    t = 0;
    r = 1;
    for (int i = 11; i >= 0; i--) {
        if (edges_p[i] == 4) {
            t += binomial[i + j - 3][r];
            r--;
        }
        if (edges_p[i] < 4) j++;
    }
    x = x * 9 + t;
    j = 0;
    t = 0;
    r = 1;
    for (int i = 11; i >= 0; i--) {
        if (edges_p[i] == 3) {
            t += binomial[i + j - 2][r];
            r--;
        }
        if (edges_p[i] < 3) j++;
    }
    x = x * 10 + t;
    j = 0;
    t = 0;
    r = 1;
    for (int i = 11; i >= 0; i--) {
        if (edges_p[i] == 2) {
            t += binomial[i + j - 1][r];
            r--;
        }
        if (edges_p[i] < 2) j++;
    }
    x = x * 11 + t;
    j = 0;
    t = 0;
    r = 1;
    for (int i = 11; i >= 0; i--) {
        if (edges_p[i] == 1) {
            t += binomial[i + j][r];
            r--;
        }
    }
    x = x * 12 + t;
    return x;
}

std::array<char, 12> Puzzle::decode_edges_p(uint32_t t) {
    std::array<char, 12> edges_p;
    for (int i = 0; i < 12; i++) edges_p[i] = 0;
    uint32_t t2;
    int r, j;
    r = 1;
    j = 0;
    t2 = t % 12;
    for (int i = 11; i >= 0; i--) {
        if (edges_p[i] != 0) {
            j++;
            continue;
        }
        if (t2 >= binomial[i + j][r]) {
            t2 -= binomial[i + j][r];
            edges_p[i] = 1;
            r--;
        }
    }
    t /= 12;
    r = 1;
    j = 0;
    t2 = t % 11;
    for (int i = 11; i >= 0; i--) {
        if (edges_p[i] != 0) {
            j++;
            continue;
        }
        if (t2 >= binomial[i + j - 1][r]) {
            t2 -= binomial[i + j - 1][r];
            edges_p[i] = 2;
            r--;
        }
    }
    t /= 11;
    r = 1;
    j = 0;
    t2 = t % 10;
    for (int i = 11; i >= 0; i--) {
        if (edges_p[i] != 0) {
            j++;
            continue;
        }
        if (t2 >= binomial[i + j - 2][r]) {
            t2 -= binomial[i + j - 2][r];
            edges_p[i] = 3;
            r--;
        }
    }
    t /= 10;
    r = 1;
    j = 0;
    t2 = t % 9;
    for (int i = 11; i >= 0; i--) {
        if (edges_p[i] != 0) {
            j++;
            continue;
        }
        if (t2 >= binomial[i + j - 3][r]) {
            t2 -= binomial[i + j - 3][r];
            edges_p[i] = 4;
            r--;
        }
    }
    t /= 9;
    r = 1;
    j = 0;
    t2 = t % 8;
    for (int i = 11; i >= 0; i--) {
        if (edges_p[i] != 0) {
            j++;
            continue;
        }
        if (t2 >= binomial[i + j - 4][r]) {
            t2 -= binomial[i + j - 4][r];
            edges_p[i] = 5;
            r--;
        }
    }
    t /= 8;
    r = 1;
    j = 0;
    t2 = t % 7;
    for (int i = 11; i >= 0; i--) {
        if (edges_p[i] != 0) {
            j++;
            continue;
        }
        if (t2 >= binomial[i + j - 5][r]) {
            t2 -= binomial[i + j - 5][r];
            edges_p[i] = 6;
            r--;
        }
    }
    t /= 7;
    r = 6;
    j = 0;
    t2 = t % 1;
    for (int i = 11; i >= 0; i--) {
        if (edges_p[i] != 0) {
            j++;
            continue;
        }
        if (t2 >= binomial[i + j - 6][r]) {
            t2 -= binomial[i + j - 6][r];
            edges_p[i] = 7;
            r--;
        }
    }
    return edges_p;
}

uint32_t Puzzle::encode_edges_2_p(std::array<char,12> edges_2_p) {
    uint32_t x = 0;
    uint32_t t;
    int r, j;
    j = 0;
    t = 0;
    r = 1;
    for (int i = 11; i >= 0; i--) {
        if (edges_2_p[i] == 7) {
            t += binomial[i + j - 11][r];
            r--;
        }
        if (edges_2_p[i] < 7) j++;
    }
    x = x * 1 + t;
    j = 0;
    t = 0;
    r = 1;
    for (int i = 11; i >= 0; i--) {
        if (edges_2_p[i] == 6) {
            t += binomial[i + j - 10][r];
            r--;
        }
        if (edges_2_p[i] < 6) j++;
    }
    x = x * 2 + t;
    j = 0;
    t = 0;
    r = 1;
    for (int i = 11; i >= 0; i--) {
        if (edges_2_p[i] == 5) {
            t += binomial[i + j - 9][r];
            r--;
        }
        if (edges_2_p[i] < 5) j++;
    }
    x = x * 3 + t;
    j = 0;
    t = 0;
    r = 1;
    for (int i = 11; i >= 0; i--) {
        if (edges_2_p[i] == 4) {
            t += binomial[i + j - 8][r];
            r--;
        }
        if (edges_2_p[i] < 4) j++;
    }
    x = x * 4 + t;
    j = 0;
    t = 0;
    r = 1;
    for (int i = 11; i >= 0; i--) {
        if (edges_2_p[i] == 3) {
            t += binomial[i + j - 7][r];
            r--;
        }
        if (edges_2_p[i] < 3) j++;
    }
    x = x * 5 + t;
    j = 0;
    t = 0;
    r = 1;
    for (int i = 11; i >= 0; i--) {
        if (edges_2_p[i] == 2) {
            t += binomial[i + j - 6][r];
            r--;
        }
        if (edges_2_p[i] < 2) j++;
    }
    x = x * 6 + t;
    j = 0;
    t = 0;
    r = 6;
    for (int i = 11; i >= 0; i--) {
        if (edges_2_p[i] == 1) {
            t += binomial[i + j][r];
            r--;
        }
    }
    x = x * 924 + t;
    return x;
}

std::array<char,12> Puzzle::decode_edges_2_p(uint32_t t) {
    std::array<char, 12> edges_2_p;
    for (int i = 0; i < 12; i++) edges_2_p[i] = 0;
    uint32_t t2;
    int r, j;
    r = 6;
    j = 0;
    t2 = t % 924;
    for (int i = 11; i >= 0; i--) {
        if (edges_2_p[i] != 0) {
            j++;
            continue;
        }
        if (t2 >= binomial[i + j][r]) {
            t2 -= binomial[i + j][r];
            edges_2_p[i] = 1;
            r--;
        }
    }
    t /= 924;
    r = 1;
    j = 0;
    t2 = t % 6;
    for (int i = 11; i >= 0; i--) {
        if (edges_2_p[i] != 0) {
            j++;
            continue;
        }
        if (t2 >= binomial[i + j - 6][r]) {
            t2 -= binomial[i + j - 6][r];
            edges_2_p[i] = 2;
            r--;
        }
    }
    t /= 6;
    r = 1;
    j = 0;
    t2 = t % 5;
    for (int i = 11; i >= 0; i--) {
        if (edges_2_p[i] != 0) {
            j++;
            continue;
        }
        if (t2 >= binomial[i + j - 7][r]) {
            t2 -= binomial[i + j - 7][r];
            edges_2_p[i] = 3;
            r--;
        }
    }
    t /= 5;
    r = 1;
    j = 0;
    t2 = t % 4;
    for (int i = 11; i >= 0; i--) {
        if (edges_2_p[i] != 0) {
            j++;
            continue;
        }
        if (t2 >= binomial[i + j - 8][r]) {
            t2 -= binomial[i + j - 8][r];
            edges_2_p[i] = 4;
            r--;
        }
    }
    t /= 4;
    r = 1;
    j = 0;
    t2 = t % 3;
    for (int i = 11; i >= 0; i--) {
        if (edges_2_p[i] != 0) {
            j++;
            continue;
        }
        if (t2 >= binomial[i + j - 9][r]) {
            t2 -= binomial[i + j - 9][r];
            edges_2_p[i] = 5;
            r--;
        }
    }
    t /= 3;
    r = 1;
    j = 0;
    t2 = t % 2;
    for (int i = 11; i >= 0; i--) {
        if (edges_2_p[i] != 0) {
            j++;
            continue;
        }
        if (t2 >= binomial[i + j - 10][r]) {
            t2 -= binomial[i + j - 10][r];
            edges_2_p[i] = 6;
            r--;
        }
    }
    t /= 2;
    r = 1;
    j = 0;
    t2 = t % 1;
    for (int i = 11; i >= 0; i--) {
        if (edges_2_p[i] != 0) {
            j++;
            continue;
        }
        if (t2 >= binomial[i + j - 11][r]) {
            t2 -= binomial[i + j - 11][r];
            edges_2_p[i] = 7;
            r--;
        }
    }
    return edges_2_p;
}